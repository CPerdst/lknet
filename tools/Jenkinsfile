pipeline {
    agent any
    environment {
        DOCKER_IMAGE = 'l1akr/boost-env:v1.0'
        WORKSPACE = '/workspace'
        TEST_CONTAINER_NAME = 'simple-server-container'
        TEST_IMAGE_NAME = 'simple-server-env:latest'
        TEST_CLIENT_CONTAINER_NAME = 'simple-client-container'
        TEST_CLIENT_IMAGE_NAME = 'simple-client-env:latest'
    }
    parameters {
      choice choices: ['1', '2'], description: '编译模式 1) Debug 2) Release', name: 'BUILD_TYPE'
      choice choices: ['1', '2'], description: 'OCR编译模式 1) 静态 2) 动态', name: 'OCR_BUILD_TYPE'
      choice choices: ['2', '1'], description: '是否编译使用样例与测试样例 1) 是 2) 否', name: 'EXAMPLE_TEST_BUILD'
      choice choices: ['1', '2'], description: '编译套件 1)GNU 2) Clang', name: 'TOOLSET_TYPE'
    }
    stages {
        stage('构建Boost环境镜像') {
            steps {
                script {
                    // 使用三引号包裹多行 Shell 脚本
                    sh '''
                    cat <<EOF > ./Dockerfile
FROM ubuntu:20.04

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Shanghai

RUN apt-get update && apt-get install -y build-essential wget git libboost-all-dev cmake curl vim net-tools && apt-get clean

WORKDIR /app

CMD ["/bin/bash"]
EOF
                    '''
                }
                // 构建容器镜像
                script {
                    sh '''
                    docker build -t l1akr/boost-env:v1.0 -f ./Dockerfile .
                    '''
                }
            }
        }
        stage('启动Boost环境并执行项目构建') {
            steps {
                script{
                    // 设置容器使用host网络，并设置代理
                    docker.image('l1akr/boost-env:v1.0').inside() {
                        // 克隆远程代码
//                         sh "git clone --recursive https://github.com/CPerdst/lknet.git"
//                         sh "cat ./lknet/tools/Jenkinsfile"
                        // 初始化子模块
                        sh "git submodule update --init lklog"
                        // 执行代码构建
                        sh "echo '${params.BUILD_TYPE}\n${params.OCR_BUILD_TYPE}\n${params.EXAMPLE_TEST_BUILD}\n${params.TOOLSET_TYPE}' | ./build.sh"
//                         // 测试样例代码
//                         sh '''
//                         ./lknet/build-Debug-gcc-static/bin/simple-server 127.0.0.1 18080 &
//                         tail -f /dev/null
//                         '''
                    }
                }
            }
        }
        stage('部署测试服务端') {
            steps {
                // 编写Dockerfile
                script {
                    sh """
                    cat <<EOF > ./Dockerfile
FROM ${DOCKER_IMAGE}

WORKDIR /WORKSPACE

EXPOSE 18080

COPY ./build-Debug-gcc-static/bin/example_simple_server /WORKSPACE

CMD [\"/WORKSPACE/example_simple_server\", \"127.0.0.1\", \"18080\"]
EOF
                    """
                }
                // 构建服务端容器镜像
                script {
                    sh "docker build -t ${TEST_IMAGE_NAME} -f Dockerfile ."
                }
                // 启动服务端容器
                script {
                    sh """
                    docker rm -f ${TEST_CONTAINER_NAME} || echo "ok"
                    docker run -d \
                    --name ${TEST_CONTAINER_NAME} \
                    -p 18080:18080 \
                    ${TEST_IMAGE_NAME}
                    """
                }
            }
        }
        stage('部署测试客户端') {
            steps {
                // 编写Dockerfile
                script {
                    sh """
                    cat <<EOF > ./Dockerfile
FROM ${DOCKER_IMAGE}

WORKDIR /WORKSPACE

COPY ./build-Debug-gcc-static/bin/example_simple_client /WORKSPACE

CMD [\"/WORKSPACE/example_simple_client\", \"127.0.0.1\", \"18080\"]
EOF
                    """
                }
                // 构建客户端容器镜像
                script {
                    sh "docker build -t ${TEST_CLIENT_IMAGE_NAME} -f Dockerfile ."
                }
                // 启动客户端容器
                script {
                    sh """
                    docker rm -f ${TEST_CLIENT_CONTAINER_NAME} || echo 'ok'
                    docker run -d \
                    --name ${TEST_CLIENT_CONTAINER_NAME} \
                    ${TEST_CLIENT_IMAGE_NAME}
                    """
                }
            }
        }
    }

    post {
        always {
            script {
                sh """
                rm -rf ./*
                """
            }
        }
    }
}
